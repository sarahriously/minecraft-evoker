#!/bin/bash
# /etc/init.d/minecraft
# version 0.4.2 2016-02-09 (YYYY-MM-DD)
#
### BEGIN INIT INFO
# Provides:   minecraft
# Required-Start: $local_fs $remote_fs screen-cleanup
# Required-Stop:  $local_fs $remote_fs
# Should-Start:   $network
# Should-Stop:    $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description: Minecraft server
# Description: Manages the minecraft server, provides backups.
### END INIT INFO

SCREENNAME='minecraft'
USERNAME='root'

# Paths
BUCKET_NAME=`cat /var/lib/cloud/data/bucket_name`
SERVER_NAME=`cat /var/lib/cloud/data/server_name`
MC_HOME="/home/minecraft"
BACKUPPATH="$MC_HOME/backups"
WORLD='world'
CONFIGS=`cat /var/lib/cloud/data/config_artifacts | sed 's/,//g' | sed 's/\///g'` 

# Server
SERVICE='server.jar'
OPTIONS='nogui'
MAXHEAP=`cat /var/lib/cloud/data/max_heap`
MINHEAP=`cat /var/lib/cloud/data/min_heap`
CPU_COUNT=`cat /var/lib/cloud/data/cpus`
HISTORY=1024
INVOCATION="/usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java -Xmx${MAXHEAP}M -Xms${MINHEAP}M -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalPacing -XX:ParallelGCThreads=${CPU_COUNT} -XX:+AggressiveOpts -jar $SERVICE $OPTIONS"

mc_start() {
  if  pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
    echo "The server is already running!"
  else
    echo "Starting the server..."
    cd $MC_HOME
    cd $MC_HOME && screen -h $HISTORY -dmS ${SCREENNAME} $INVOCATION
    sleep 7
    if pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
      echo "The server is now running."
    else
      echo "Error! Could not start the server!"
    fi
  fi
}

mc_saveoff() {
  if pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
    echo "The server is running... suspending saves"
    screen -p 0 -S ${SCREENNAME} -X eval 'stuff "save-off"\015'
    screen -p 0 -S ${SCREENNAME} -X eval 'stuff "save-all"\015'
    sync
    sleep 10
  else
    echo "The server is not running. Not suspending saves."
  fi
}

mc_saveon() {
  if pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
    echo "The server is running... re-enabling saves"
    screen -p 0 -S ${SCREENNAME} -X eval 'stuff "save-on"\015'
  else
    echo "The server is not running. Not resuming saves."
  fi
}

mc_stop() {
  if pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
    echo "Stopping the server"
    screen -p 0 -S ${SCREENNAME} -X eval 'stuff "say SERVER SHUTTING DOWN IN 10 SECONDS. Saving map..."\015'
    screen -p 0 -S ${SCREENNAME} -X eval 'stuff "save-all"\015'
    sleep 10
    screen -p 0 -S ${SCREENNAME} -X eval 'stuff "stop"\015'
    sleep 7
  else
    echo "The server was not running."
  fi
  if pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
    echo "Error! The server could not be stopped."
  else
    echo "The server is stopped."
  fi
}

mc_backup_world() {
  pushd $MC_HOME
  if lockfile "$BACKUPPATH/backup.lock"; then
    echo "Locked backup lockfile"
  else
    echo "Failed to lock lockfile"
    exit 1
  fi
  screen -p 0 -S ${SCREENNAME} -X eval 'stuff "say [Backup] Backup starting in 10 seconds, prepare for lag..."\015'
  sleep 10
  mc_saveoff
  local backup_file="$BACKUPPATH/backup.zip"
  echo "Backing up minecraft world..."
  rm -f $backup_file
  nice -n 19 zip -r "$backup_file.zip" $WORLD*

  mc_saveon

  local remote_dir="s3://$BUCKET_NAME/servers/$SERVER_NAME/world_backups/"
  aws s3 ls $remote_dir > /tmp/backup_listing
  if ( cat /tmp/backup_listing | grep -Fq "current.zip" ); then
    if (cat /tmp/backup_listing | grep -Fq "previous.zip" ); then
      aws s3 rm "${remote_dir}previous.zip"
    fi
    aws s3 mv "${remote_dir}current.zip" "${remote_dir}previous.zip"
  fi
  aws s3 mv "${backup_file}.zip" "${remote_dir}current.zip"

  echo "Removing lockfile"
  rm -f "$BACKUPPATH/backup.lock"
  echo "Done."
  screen -p 0 -S ${SCREENNAME} -X eval 'stuff "say [Backup] Backup now complete :)"\015'
  popd
}

mc_backup_copy() {
  echo "Copying making longterm copy of current backup..."

  local remote_dir="s3://$BUCKET_NAME/servers/$SERVER_NAME/world_backups/"
  local today=`date -I`

  aws s3 cp "${remote_dir}current.zip" "${remote_dir}${today}.zip"

  echo "Done."
}

mc_backup_config() {
  pushd $MC_HOME
  echo "Backing up config..."

  local remote_dir="s3://$BUCKET_NAME/servers/$SERVER_NAME/configs/"
  ls -l > /tmp/local-config-list.tmp
  for file in $(echo $CONFIGS); do
    if (cat /tmp/local-config-list.tmp | grep -Fq "$file"); then
      local local_file="$MC_HOME/$file"
      if [[ -d $local_file ]]; then
      zip -r "$file.zip" "$file"
      echo "Copying zipped directory $file.zip from $MC_HOME to s3"
      aws s3 cp "$local_file.zip" "$remote_dir$file.zip"
      rm -f $file.zip
      else
      echo "Copying $file from $MC_HOME to s3"
      aws s3 cp "$local_file" "$remote_dir$file"
      fi
    fi
  done
  echo "Done."
  popd
}

mc_status() {
  if pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
    echo "Minecraft is running."
  else
    echo "Minecraft is not running."
  fi
}

case "$1" in
  start)
    mc_start
    ;;
  stop)
    mc_stop
    ;;
  restart)
    mc_stop
    mc_start
    ;;
  backup_world)
    mc_backup_world
    ;;
  backup_config)
    mc_backup_config
    ;;
  backup_copy)
    mc_backup_copy
    ;;
  status)
    mc_status
    ;;

  *)
  echo "Usage: $0 {start|stop|backup|status|restart \"server command\"}"
  exit 1
  ;;
esac

exit 0
